package com.dkohut.dmbrb.wrappers;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.2.0.
 */
public class DMBRBController extends Contract {
    private static final String BINARY = "0x60606040526000600360146101000a81548160ff021916908360048111156200002457fe5b02179055506001600360156101000a81548160ff021916908360048111156200004957fe5b021790555060038060166101000a81548160ff021916908360048111156200006d57fe5b02179055506002600360176101000a81548160ff021916908360048111156200009257fe5b0217905550609660045562015180600555336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613c0880620000f36000396000f30060606040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806312ee50571461016d57806315a4955c1461018f5780632a53fdbe146101c65780632c1071ee1461020557806333df35a11461023c5780633409ecb9146102735780633ccfd60b146102a757806341c0e1b5146102d457806341ec80f8146102e9578063485e3e851461032057806361a52a3614610375578063895effb41461039e5780638da5cb5b146103c757806399c61fb81461041c5780639eee48061461045b578063a6a412f9146104b0578063a6f9dae114610501578063b5dbe0d114610552578063ca5dc3421461058f578063e717306c146105e4578063f918356914610635575b3373ffffffffffffffffffffffffffffffffffffffff167f8cd787b71532f662d581f9ea765379c7759950cd7dedb590bc8f6f7b454bd5ed346040518082815260200191505060405180910390a2005b610175610686565b604051808215151515815260200191505060405180910390f35b341561019a57600080fd5b6101a2610b5e565b604051808260048111156101b257fe5b60ff16815260200191505060405180910390f35b34156101d157600080fd5b6101eb600480803560001916906020019091905050610b71565b604051808215151515815260200191505060405180910390f35b341561021057600080fd5b6102186115dc565b6040518082600481111561022857fe5b60ff16815260200191505060405180910390f35b341561024757600080fd5b61024f6115ef565b6040518082600481111561025f57fe5b60ff16815260200191505060405180910390f35b61028d600480803560001916906020019091905050611602565b604051808215151515815260200191505060405180910390f35b34156102b257600080fd5b6102ba611f86565b604051808215151515815260200191505060405180910390f35b34156102df57600080fd5b6102e7612198565b005b34156102f457600080fd5b6102fc61222d565b6040518082600481111561030c57fe5b60ff16815260200191505060405180910390f35b341561032b57600080fd5b610333612240565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561038057600080fd5b610388612266565b6040518082815260200191505060405180910390f35b34156103a957600080fd5b6103b161226c565b6040518082815260200191505060405180910390f35b34156103d257600080fd5b6103da612272565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561042757600080fd5b610441600480803560001916906020019091905050612297565b604051808215151515815260200191505060405180910390f35b341561046657600080fd5b61046e612a20565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104bb57600080fd5b6104e7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612a46565b604051808215151515815260200191505060405180910390f35b341561050c57600080fd5b610538600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612ba0565b604051808215151515815260200191505060405180910390f35b610575600480803560001916906020019091908035906020019091905050612ce7565b604051808215151515815260200191505060405180910390f35b341561059a57600080fd5b6105a2613875565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105ef57600080fd5b61061b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061389b565b604051808215151515815260200191505060405180910390f35b341561064057600080fd5b61066c600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506139f5565b604051808215151515815260200191505060405180910390f35b6000806000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ee140236336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561075357600080fd5b6102c65a03f1151561076457600080fd5b5050506040518051905011151561077a57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ee140236336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561083f57600080fd5b6102c65a03f1151561085057600080fd5b5050506040518051905092508234101515610a55576108788334613b4f90919063ffffffff16565b9150600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e02e5b833600080604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561094757600080fd5b6102c65a03f1151561095857600080fd5b5050506040518051905050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f2d813f33846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610a3057600080fd5b6102c65a03f11515610a4157600080fd5b505050604051805190505060019350610b58565b610a683484613b4f90919063ffffffff16565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e02e5b833836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610b3757600080fd5b6102c65a03f11515610b4857600080fd5b5050506040518051905050600093505b50505090565b600360179054906101000a900460ff1681565b600080600080600080600087600060010260001916600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d105172836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1515610c2757600080fd5b6102c65a03f11515610c3857600080fd5b505050604051805190506000191614151515610c5357600080fd5b88600360149054906101000a900460ff166004811115610c6f57fe5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1559248836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1515610d1057600080fd5b6102c65a03f11515610d2157600080fd5b50505060405180519050141515610d3757600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663792aac958b6000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1515610dd857600080fd5b6102c65a03f11515610de957600080fd5b505050604051805190504210151515610e0157600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b08e96928b600360179054906101000a900460ff166000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808360001916600019168152602001826004811115610ea257fe5b60ff16815260200192505050602060405180830381600087803b1515610ec757600080fd5b6102c65a03f11515610ed857600080fd5b5050506040518051905050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663792aac958b6000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1515610f8457600080fd5b6102c65a03f11515610f9557600080fd5b505050604051805190509750610fc8600554610fba8a42613b4f90919063ffffffff16565b613b6890919063ffffffff16565b9650600087111561156d576110b5876110a7600454600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2b025eb8f6000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b151561107e57600080fd5b6102c65a03f1151561108f57600080fd5b50505060405180519050613b6890919063ffffffff16565b613b8390919063ffffffff16565b9550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f340c0d0336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561117c57600080fd5b6102c65a03f1151561118d57600080fd5b50505060405180519050945085851015156112a257600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f2d813f336111f48989613b4f90919063ffffffff16565b6000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561128157600080fd5b6102c65a03f1151561129257600080fd5b505050604051805190505061156c565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f340c0d0336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561136757600080fd5b6102c65a03f1151561137857600080fd5b5050506040518051905093506113978487613b4f90919063ffffffff16565b9250600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f2d813f33600080604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561146657600080fd5b6102c65a03f1151561147757600080fd5b5050506040518051905050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e02e5b833856000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561154f57600080fd5b6102c65a03f1151561156057600080fd5b50505060405180519050505b5b3373ffffffffffffffffffffffffffffffffffffffff167f367d6d2f225da10b05bbf17756074eacaa23c4e4d5e43e108d94430dd884b1988b426040518083600019166000191681526020018281526020019250505060405180910390a2600198505050505050505050919050565b600360149054906101000a900460ff1681565b600360169054906101000a900460ff1681565b600080600080600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ee140236336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15156116d057600080fd5b6102c65a03f115156116e157600080fd5b505050604051805190501415156116f757600080fd5b85600060010260001916600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d105172836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15156117a257600080fd5b6102c65a03f115156117b357600080fd5b5050506040518051905060001916141515156117ce57600080fd5b86600360149054906101000a900460ff1660048111156117ea57fe5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1559248836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b151561188b57600080fd5b6102c65a03f1151561189c57600080fd5b50505060405180519050141515156118b357600080fd5b600360159054906101000a900460ff1660048111156118ce57fe5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1559248836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b151561196f57600080fd5b6102c65a03f1151561198057600080fd5b505050604051805190501415151561199757600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2b025eb896000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1515611a3857600080fd5b6102c65a03f11515611a4957600080fd5b505050604051805190509550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f340c0d0336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515611b1a57600080fd5b6102c65a03f11515611b2b57600080fd5b505050604051805190509450611b4a8534613bbe90919063ffffffff16565b93508584101515611e8d57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b08e969289600360159054906101000a900460ff166000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808360001916600019168152602001826004811115611bf657fe5b60ff16815260200192505050602060405180830381600087803b1515611c1b57600080fd5b6102c65a03f11515611c2c57600080fd5b5050506040518051905050611c4a8685613b4f90919063ffffffff16565b9250600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f2d813f33856000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515611d1957600080fd5b6102c65a03f11515611d2a57600080fd5b5050506040518051905050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663218ae47e89336000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1515611e0a57600080fd5b6102c65a03f11515611e1b57600080fd5b50505060405180519050503373ffffffffffffffffffffffffffffffffffffffff167f594e033d67e866652460fef785d2276f20b6895fbf2b8b34c21e08011cd2db7b89886040518083600019166000191681526020018281526020019250505060405180910390a260019650611f7b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f2d813f33866000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515611f5a57600080fd5b6102c65a03f11515611f6b57600080fd5b5050506040518051905050600096505b505050505050919050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f340c0d0336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561204e57600080fd5b6102c65a03f1151561205f57600080fd5b505050604051805190509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f2d813f33600080604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561213857600080fd5b6102c65a03f1151561214957600080fd5b50505060405180519050503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561219457600080fd5b5090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121f357600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b600360159054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b60045481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008060008086600060010260001916600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d105172836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b151561234b57600080fd5b6102c65a03f1151561235c57600080fd5b50505060405180519050600019161415151561237757600080fd5b87600360149054906101000a900460ff16600481111561239357fe5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1559248836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b151561243457600080fd5b6102c65a03f1151561244557600080fd5b5050506040518051905014151561245b57600080fd5b42600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663792aac958b6000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15156124fd57600080fd5b6102c65a03f1151561250e57600080fd5b505050604051805190501015151561252557600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b08e96928a600360169054906101000a900460ff166000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018260048111156125c657fe5b60ff16815260200192505050602060405180830381600087803b15156125eb57600080fd5b6102c65a03f115156125fc57600080fd5b5050506040518051905050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663792aac958a6000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15156126a857600080fd5b6102c65a03f115156126b957600080fd5b5050506040518051905096506126ec6005546126de428a613b4f90919063ffffffff16565b613b6890919063ffffffff16565b95506127d0866127c2600454600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2b025eb8e6000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b151561279957600080fd5b6102c65a03f115156127aa57600080fd5b50505060405180519050613b6890919063ffffffff16565b613b8390919063ffffffff16565b9450600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f340c0d0336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561289757600080fd5b6102c65a03f115156128a857600080fd5b5050506040518051905093506128c78585613bbe90919063ffffffff16565b9250600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f2d813f33856000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561299657600080fd5b6102c65a03f115156129a757600080fd5b50505060405180519050503373ffffffffffffffffffffffffffffffffffffffff167f367d6d2f225da10b05bbf17756074eacaa23c4e4d5e43e108d94430dd884b1988a426040518083600019166000191681526020018281526020019250505060405180910390a26001975050505050505050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808260008173ffffffffffffffffffffffffffffffffffffffff1614151515612a7057600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915083600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb1b0672a1021e136f33c4a8b1bf7c40ae28ce606b546f4b338345d72fb6edb1a828560405180807f495769746864726177616c7343726174650000000000000000000000000000008152506020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600192505050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612bfd57600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff1614151515612c2357600080fd5b8173ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f96b36bedce75759b139551b10b3d2e1e863dbbfbdc30f9f9e374bb24431d5da260405160405180910390a3816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b6000806000806000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ee140236336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515612db757600080fd5b6102c65a03f11515612dc857600080fd5b50505060405180519050141515612dde57600080fd5b87600060010260001916600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d105172836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1515612e8957600080fd5b6102c65a03f11515612e9a57600080fd5b505050604051805190506000191614151515612eb557600080fd5b88600360149054906101000a900460ff166004811115612ed157fe5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1559248836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1515612f7257600080fd5b6102c65a03f11515612f8357600080fd5b5050506040518051905014151515612f9a57600080fd5b600360159054906101000a900460ff166004811115612fb557fe5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1559248836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b151561305657600080fd5b6102c65a03f1151561306757600080fd5b505050604051805190501415151561307e57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f137e228b6000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b151561311f57600080fd5b6102c65a03f1151561313057600080fd5b50505060405180519050151561314557600080fd5b61316d600161315f6005548c613b6890919063ffffffff16565b613bbe90919063ffffffff16565b9650600e871015151561317f57600080fd5b61326187613253600454600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2b025eb8f6000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b151561322a57600080fd5b6102c65a03f1151561323b57600080fd5b50505060405180519050613b6890919063ffffffff16565b613b8390919063ffffffff16565b9550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f340c0d0336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561332857600080fd5b6102c65a03f1151561333957600080fd5b5050506040518051905094506133588534613bbe90919063ffffffff16565b9350858410151561377a57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b08e96928b600360149054906101000a900460ff166000604051602001526040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182600481111561340457fe5b60ff16815260200192505050602060405180830381600087803b151561342957600080fd5b6102c65a03f1151561343a57600080fd5b5050506040518051905050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1df4e8f8b6134978c42613bbe90919063ffffffff16565b6000604051602001526040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050602060405180830381600087803b151561350057600080fd5b6102c65a03f1151561351157600080fd5b505050604051805190505061352f8685613b4f90919063ffffffff16565b9250600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f2d813f33856000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156135fe57600080fd5b6102c65a03f1151561360f57600080fd5b5050506040518051905050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663218ae47e8b336000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15156136ef57600080fd5b6102c65a03f1151561370057600080fd5b50505060405180519050503373ffffffffffffffffffffffffffffffffffffffff167f71aedf13cc1ebc7ea3064b492131c3b2e6b13a43ca6475659fc36defb13fc8e78b888a604051808460001916600019168152602001838152602001828152602001935050505060405180910390a260019750613868565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f2d813f33866000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561384757600080fd5b6102c65a03f1151561385857600080fd5b5050506040518051905050600097505b5050505050505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808260008173ffffffffffffffffffffffffffffffffffffffff16141515156138c557600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915083600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb1b0672a1021e136f33c4a8b1bf7c40ae28ce606b546f4b338345d72fb6edb1a828560405180807f49446562746f72734372617465000000000000000000000000000000000000008152506020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600192505050919050565b6000808260008173ffffffffffffffffffffffffffffffffffffffff1614151515613a1f57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb1b0672a1021e136f33c4a8b1bf7c40ae28ce606b546f4b338345d72fb6edb1a828560405180807f49426f6f6b7343726174650000000000000000000000000000000000000000008152506020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600192505050919050565b6000828211151515613b5d57fe5b818303905092915050565b6000808284811515613b7657fe5b0490508091505092915050565b6000806000841415613b985760009150613bb7565b8284029050828482811515613ba957fe5b04141515613bb357fe5b8091505b5092915050565b6000808284019050838110151515613bd257fe5b80915050929150505600a165627a7a723058205950474ddc684b7438881e0b1c02dede5f75605e34561997fea1622d673941c80029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
    }

    protected DMBRBController(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DMBRBController(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<LogChangeCrateAddressEventResponse> getLogChangeCrateAddressEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogChangeCrateAddress", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogChangeCrateAddressEventResponse> responses = new ArrayList<LogChangeCrateAddressEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogChangeCrateAddressEventResponse typedResponse = new LogChangeCrateAddressEventResponse();
            typedResponse.contractName = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.oldAddress = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.newAddress = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogChangeCrateAddressEventResponse> logChangeCrateAddressEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogChangeCrateAddress", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogChangeCrateAddressEventResponse>() {
            @Override
            public LogChangeCrateAddressEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogChangeCrateAddressEventResponse typedResponse = new LogChangeCrateAddressEventResponse();
                typedResponse.contractName = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.oldAddress = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.newAddress = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public List<LogBuyBookEventResponse> getLogBuyBookEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogBuyBook", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogBuyBookEventResponse> responses = new ArrayList<LogBuyBookEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogBuyBookEventResponse typedResponse = new LogBuyBookEventResponse();
            typedResponse.actor = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.key = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.price = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogBuyBookEventResponse> logBuyBookEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogBuyBook", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogBuyBookEventResponse>() {
            @Override
            public LogBuyBookEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogBuyBookEventResponse typedResponse = new LogBuyBookEventResponse();
                typedResponse.actor = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.key = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.price = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public List<LogRentBookEventResponse> getLogRentBookEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogRentBook", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogRentBookEventResponse> responses = new ArrayList<LogRentBookEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogRentBookEventResponse typedResponse = new LogRentBookEventResponse();
            typedResponse.actor = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.key = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.price = (Uint256) eventValues.getNonIndexedValues().get(1);
            typedResponse.period = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogRentBookEventResponse> logRentBookEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogRentBook", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogRentBookEventResponse>() {
            @Override
            public LogRentBookEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogRentBookEventResponse typedResponse = new LogRentBookEventResponse();
                typedResponse.actor = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.key = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.price = (Uint256) eventValues.getNonIndexedValues().get(1);
                typedResponse.period = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public List<LogReturnBookEventResponse> getLogReturnBookEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogReturnBook", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogReturnBookEventResponse> responses = new ArrayList<LogReturnBookEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogReturnBookEventResponse typedResponse = new LogReturnBookEventResponse();
            typedResponse.actor = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.key = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.time = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogReturnBookEventResponse> logReturnBookEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogReturnBook", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogReturnBookEventResponse>() {
            @Override
            public LogReturnBookEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogReturnBookEventResponse typedResponse = new LogReturnBookEventResponse();
                typedResponse.actor = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.key = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.time = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public List<LogEtherReceivedEventResponse> getLogEtherReceivedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogEtherReceived", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogEtherReceivedEventResponse> responses = new ArrayList<LogEtherReceivedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogEtherReceivedEventResponse typedResponse = new LogEtherReceivedEventResponse();
            typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogEtherReceivedEventResponse> logEtherReceivedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogEtherReceived", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogEtherReceivedEventResponse>() {
            @Override
            public LogEtherReceivedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogEtherReceivedEventResponse typedResponse = new LogEtherReceivedEventResponse();
                typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<LogChangeOwnerEventResponse> getLogChangeOwnerEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogChangeOwner", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogChangeOwnerEventResponse> responses = new ArrayList<LogChangeOwnerEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogChangeOwnerEventResponse typedResponse = new LogChangeOwnerEventResponse();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogChangeOwnerEventResponse> logChangeOwnerEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogChangeOwner", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogChangeOwnerEventResponse>() {
            @Override
            public LogChangeOwnerEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogChangeOwnerEventResponse typedResponse = new LogChangeOwnerEventResponse();
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public RemoteCall<TransactionReceipt> payDebt(BigInteger weiValue) {
        Function function = new Function(
                "payDebt", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Uint8> RETURNED_BOOK_STATUS() {
        Function function = new Function("RETURNED_BOOK_STATUS", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> bookReturn(Bytes32 _key) {
        Function function = new Function(
                "bookReturn", 
                Arrays.<Type>asList(_key), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint8> RENTED_BOOK_STATUS() {
        Function function = new Function("RENTED_BOOK_STATUS", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint8> EARLY_RETURN_BOOK_STATUS() {
        Function function = new Function("EARLY_RETURN_BOOK_STATUS", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> buyBook(Bytes32 _key, BigInteger weiValue) {
        Function function = new Function(
                "buyBook", 
                Arrays.<Type>asList(_key), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> withdraw() {
        Function function = new Function(
                "withdraw", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> kill() {
        Function function = new Function(
                "kill", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint8> BUYED_BOOK_STATUS() {
        Function function = new Function("BUYED_BOOK_STATUS", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Address> booksCrate() {
        Function function = new Function("booksCrate", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> SECONDS_IN_DAY() {
        Function function = new Function("SECONDS_IN_DAY", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> TOTAL_TERM_IN_DAYS() {
        Function function = new Function("TOTAL_TERM_IN_DAYS", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Address> owner() {
        Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> bookEarlyReturn(Bytes32 _key) {
        Function function = new Function(
                "bookEarlyReturn", 
                Arrays.<Type>asList(_key), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> debtorsCrate() {
        Function function = new Function("debtorsCrate", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> setWithdrawalsCrate(Address _withdrawalsCrate) {
        Function function = new Function(
                "setWithdrawalsCrate", 
                Arrays.<Type>asList(_withdrawalsCrate), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeOwner(Address newOwner) {
        Function function = new Function(
                "changeOwner", 
                Arrays.<Type>asList(newOwner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> rentBook(Bytes32 _key, Uint256 term, BigInteger weiValue) {
        Function function = new Function(
                "rentBook", 
                Arrays.<Type>asList(_key, term), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Address> withdrawalsCrate() {
        Function function = new Function("withdrawalsCrate", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> setDebtorsCrate(Address _debtorsCrate) {
        Function function = new Function(
                "setDebtorsCrate", 
                Arrays.<Type>asList(_debtorsCrate), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setBooksCrate(Address _booksCrate) {
        Function function = new Function(
                "setBooksCrate", 
                Arrays.<Type>asList(_booksCrate), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<DMBRBController> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DMBRBController.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<DMBRBController> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DMBRBController.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static DMBRBController load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DMBRBController(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DMBRBController load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DMBRBController(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class LogChangeCrateAddressEventResponse {
        public Bytes32 contractName;

        public Address oldAddress;

        public Address newAddress;
    }

    public static class LogBuyBookEventResponse {
        public Address actor;

        public Bytes32 key;

        public Uint256 price;
    }

    public static class LogRentBookEventResponse {
        public Address actor;

        public Bytes32 key;

        public Uint256 price;

        public Uint256 period;
    }

    public static class LogReturnBookEventResponse {
        public Address actor;

        public Bytes32 key;

        public Uint256 time;
    }

    public static class LogEtherReceivedEventResponse {
        public Address from;

        public Uint256 value;
    }

    public static class LogChangeOwnerEventResponse {
        public Address previousOwner;

        public Address newOwner;
    }
}
